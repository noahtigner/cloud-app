{"version":3,"sources":["components/topper.jsx","components/fetchData.jsx","components/login.jsx","components/register.jsx","components/auth.jsx","components/portfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["Topper","Navbar","light","expand","NavbarBrand","href","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","fetchData","url","a","params","fetch","call","response","json","data","ok","success","Error","message","token","headers","get","console","log","localStorage","setItem","Login","useState","username","password","state","setState","history","useHistory","handleChange","e","target","id","value","prevState","Form","onSubmit","preventDefault","stopPropagation","checkValidity","method","body","JSON","stringify","then","push","catch","err","alert","classList","add","noValidate","FormGroup","Label","Input","type","placeholder","onChange","required","Register","email","confirmPassword","pattern","Auth","exact","path","component","Portfolio","cardList","setCardList","useEffect","fetchCards","getItem","cards","map","obj","i","key","src","img","alt","text","width","height","title","description","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.10f2299f.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n} from 'reactstrap';\n\nconst Topper = () => {\n    return (\n        <Navbar light expand=\"md\">\n            <NavbarBrand href={\"/\"}>noahtigner.com</NavbarBrand>\n\n            <Collapse isOpen={true} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavLink href={\"/auth/login\"}>Login</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href={\"/auth/register\"}>Register</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nexport default Topper;","const fetchData = async (url, params={}) => {\n    const call = await fetch(url, params);\n    const response = await call;\n    const data = await call.json();\n    if (!response.ok || !data.success) {\n        throw new Error(\"\\n\" + data.message + \"\\n\" + url);\n    }\n    else {\n        let token = response.headers.get(\"x-access-tokens\");\n        if(token !== null) {\n            console.log(token);\n            localStorage.setItem('token', token);\n        }\n        \n    }\n    return data;\n};\n\nexport default fetchData;","import React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport fetchData from \"./fetchData\";\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\n\nfunction Login() {\n    const [state, setState] = useState({\n        username: \"\",\n        password: \"\"\n    })\n\n    const history = useHistory();\n\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.target.checkValidity()) {\n            fetchData('https://www.noahtigner.com/auth/api-login', {\n                method: 'POST',\n                body: JSON.stringify({\n                    \"username\": state.username,\n                    \"password\": state.password\n                }),\n                headers: {\"Content-Type\": \"application/json\"}\n            }).then(data => {\n                console.log(\"success: \", data);\n                history.push(\"/\");\n            }).catch(err => {\n                console.log(err);\n                alert(err);\n            });\n\n        }\n        e.target.classList.add('was-validated');\n    }\n\n    return(\n        <Form className=\"needs-validation\" onSubmit={handleSubmitClick} noValidate>\n            <h3>Login</h3>\n\n            <FormGroup>\n                <Label>Username</Label>\n                <Input type=\"text\" \n                    className=\"form-control\" \n                    id=\"username\" \n                    placeholder=\"Enter Username\" \n                    value={state.username}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Password</Label>\n                <Input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"password\" \n                    placeholder=\"Enter password\" \n                    value={state.password}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </FormGroup>\n            <br/>\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n        </Form>\n    )\n}\n\nexport default Login;","import React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport fetchData from \"./fetchData\";\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\n\nfunction Register() {\n    const [state, setState] = useState({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const history = useHistory();\n\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.target.checkValidity()) {\n            fetchData('https://www.noahtigner.com/auth/api-register', {\n                method: 'POST',\n                body: JSON.stringify({\n                    \"username\": state.username,\n                    // \"email\": state.email,\n                    \"password\": state.password\n                }),\n                headers: {\"Content-Type\": \"application/json\"}\n            }).then(data => {\n                console.log(\"success: \", data);\n                history.push(\"/auth/login\");\n            }).catch(err => {\n                console.log(err);\n                alert(err);\n            });\n        }\n        e.target.classList.add('was-validated');\n    }\n\n    return(\n        <Form className=\"needs-validation\" onSubmit={handleSubmitClick} noValidate>\n            <h3>Register</h3>\n\n            <FormGroup>\n                <Label>Username</Label>\n                <Input \n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"username\" \n                    placeholder=\"Enter Username\" \n                    value={state.username}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Email</Label>\n                <Input \n                    type=\"email\" \n                    className=\"form-control\" \n                    id=\"email\" \n                    placeholder=\"Enter Email\" \n                    value={state.email}\n                    onChange={handleChange}\n                    required\n                />\n            </FormGroup>\n\n            <FormGroup>\n                <Label>Password</Label>\n                <Input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"password\"\n                    placeholder=\"Enter Password\" \n                    value={state.password}\n                    onChange={handleChange}\n                    required\n                />\n            </FormGroup>\n            \n            <FormGroup>\n                <Label>Confirm Password</Label>\n                <Input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"confirmPassword\" \n                    placeholder=\"Enter Password\" \n                    value={state.confirmPassword}\n                    onChange={handleChange}\n                    pattern={state.password}\n                    required\n                />\n                <div className=\"invalid-feedback\">Passwords must match</div>\n            </FormGroup>\n\n            <br/>\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n        </Form>\n    )\n}\n\nexport default Register;\n\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Login from \"./login.jsx\";\nimport Register from \"./register.jsx\";\n\nconst Auth = () => {\n    return (\n        <Router>\n            \n            <div className=\"auth-wrapper\">\n                <div className=\"auth-inner\">\n                    <Switch>\n                        <Route exact path='/auth' component={Login} />\n                        <Route path=\"/auth/login\" component={Login} />\n                        <Route path=\"/auth/register\" component={Register} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}\n\nexport default Auth;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport fetchData from \"./fetchData\";\n\nconst Portfolio = () => {\n    const history = useHistory();\n\n    const [cardList, setCardList] = useState([]);\n\n    useEffect(() => {\n        fetchCards();\n    }, []);\n\n    const fetchCards = async () => {\n        let token = localStorage.getItem(\"token\");\n        if(token === null) {\n            console.log(\"token required\");\n            alert(\"/auth/login\");\n        }\n        else {\n            fetchData('http://127.0.0.1:5000/portfolio/cards', {\n                method: 'GET',\n                headers: {\"Content-Type\": \"application/json\", \"x-access-tokens\": token}\n            }).then(data => {\n                console.log(\"success: \", data);\n\n                setCardList(\n                    data.cards.map((obj, i) => {\n                        return (\n                            <div className=\"col-md-4 d-flex align-items-stretch\" key={i}>\n                                <div className=\"card mb-4 box-shadow\">\n                                    <img className=\"card-img-top\" src={obj.img} alt={obj.text} width=\"100%\" height=\"160px\" />\n                                    <div className=\"card-body\">\n                                        <p className=\"card-text\"><strong>{obj.title}</strong><br/>{obj.description}</p>\n                                        {/* TODO: card footer */}\n                                        {/* <div className=\"d-flex justify-content-between align-items-center\"> */}\n                                        {/* <div className=\"d-flex justify-content-between align-items-end\">\n                                            <div className=\"btn-group align-items-end\">\n                                                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">View</button>\n                                                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\">Edit</button>\n                                            </div>\n                                            <small className=\"text-muted\">Footer</small>\n                                        </div> */}\n\n                                    </div>\n                                </div>\n                            </div>\n                        );\n                    })\n                );\n\n            }).catch(err => {\n                console.log(err);\n                alert(err);\n                history.push(\"/auth/login\");\n            });\n\n            \n        }\n\n    }\n\n    return (\n        <div className=\"album py-5\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    {cardList}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Portfolio;","import React from 'react';\n// import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n\n// import Login from \"./components/login.jsx\";\n// import Register from \"./components/register.jsx\";\nimport Topper from \"./components/topper.jsx\";\nimport Auth from \"./components/auth.jsx\";\nimport Portfolio from \"./components/portfolio.jsx\";\n\n\nfunction App() {\n    return (\n       <React.Fragment>\n            <Topper/>\n            {/* <Router>\n                \n                <div className=\"auth-wrapper\">\n                    <div className=\"auth-inner\">\n                        <Switch>\n                            <Route exact path='/auth' component={Login} />\n                            <Route path=\"/auth/login\" component={Login} />\n                            <Route path=\"/auth/register\" component={Register} />\n                        </Switch>\n                    </div>\n                </div>\n            </Router> */}\n            <Router>\n                <Switch>\n                    <Route path='/auth' component={Auth} />\n                    <Route path='/' component={Portfolio} />\n                </Switch>\n            </Router>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}