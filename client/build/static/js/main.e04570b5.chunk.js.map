{"version":3,"sources":["components/fetchData.jsx","components/login.jsx","components/register.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchData","url","a","params","fetch","call","response","json","data","ok","success","Error","message","token","headers","get","console","log","localStorage","setItem","Login","useState","username","password","state","setState","history","useHistory","handleChange","e","target","id","value","prevState","className","onSubmit","preventDefault","stopPropagation","checkValidity","method","body","JSON","stringify","then","push","catch","err","alert","classList","add","noValidate","type","placeholder","onChange","required","Register","email","confirmPassword","pattern","App","Navbar","color","light","expand","NavbarBrand","href","Collapse","isOpen","navbar","Nav","NavItem","NavLink","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"+VAkBeA,EAlBA,uCAAG,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAmB,GAAnB,SACKC,MAAMH,EAAKE,GADhB,cACRE,EADQ,gBAESA,EAFT,cAERC,EAFQ,gBAGKD,EAAKE,OAHV,UAGRC,EAHQ,OAITF,EAASG,IAAOD,EAAKE,QAJZ,uBAKJ,IAAIC,MAAM,KAAOH,EAAKI,SALlB,QASG,QADTC,EAAQP,EAASQ,QAAQC,IAAI,sBAE7BC,QAAQC,IAAIJ,GACZK,aAAaC,QAAQ,QAASN,IAXxB,iCAePL,GAfO,4CAAH,sDCiFAY,MA7Ef,WAAkB,IAAD,EACaC,mBAAS,CAC/BC,SAAU,GACVC,SAAU,KAHD,mBACNC,EADM,KACCC,EADD,KAMPC,EAAUC,cAEVC,EAAe,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAhBC,EADiB,EACjBA,GAAKC,EADY,EACZA,MACZP,GAAS,SAAAQ,GAAS,kCACXA,GADW,kBAEbF,EAAMC,QA2Bf,OACI,0BAAME,UAAU,mBAAmBC,SAxBb,SAACN,GACvBA,EAAEO,iBACFP,EAAEQ,kBACER,EAAEC,OAAOQ,iBACTtC,EAAU,4CAA6C,CACnDuC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB,SAAYlB,EAAMF,SAClB,SAAYE,EAAMD,WAEtBT,QAAS,CAAC,eAAgB,sBAC3B6B,MAAK,SAAAnC,GACJQ,QAAQC,IAAI,YAAaT,GACzBkB,EAAQkB,KAAK,QACdC,OAAM,SAAAC,GACL9B,QAAQC,IAAI6B,GACZC,MAAMD,MAIdjB,EAAEC,OAAOkB,UAAUC,IAAI,kBAIyCC,YAAU,GACtE,qCAEA,yBAAKhB,UAAU,cACX,2CACA,2BAAOiB,KAAK,OACRjB,UAAU,eACVH,GAAG,WACHqB,YAAY,iBACZpB,MAAOR,EAAMF,SACb+B,SAAUzB,EACV0B,UAAQ,KAMhB,yBAAKpB,UAAU,cACX,2CACA,2BACIiB,KAAK,WACLjB,UAAU,eACVH,GAAG,WACHqB,YAAY,iBACZpB,MAAOR,EAAMD,SACb8B,SAAUzB,EACV0B,UAAQ,KAKhB,6BACA,4BAAQH,KAAK,SAASjB,UAAU,6BAAhC,YCmCGqB,MA3Gf,WAAqB,IAAD,EACUlC,mBAAS,CAC/BC,SAAU,GACVkC,MAAO,GACPjC,SAAU,GACVkC,gBAAiB,KALL,mBACTjC,EADS,KACFC,EADE,KAQVC,EAAUC,cAEVC,EAAe,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAhBC,EADiB,EACjBA,GAAKC,EADY,EACZA,MACZP,GAAS,SAAAQ,GAAS,kCACXA,GADW,kBAEbF,EAAMC,QA2Bf,OACI,0BAAME,UAAU,mBAAmBC,SAxBb,SAACN,GACvBA,EAAEO,iBACFP,EAAEQ,kBACER,EAAEC,OAAOQ,iBACTtC,EAAU,+CAAgD,CACtDuC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB,SAAYlB,EAAMF,SAElB,SAAYE,EAAMD,WAEtBT,QAAS,CAAC,eAAgB,sBAC3B6B,MAAK,SAAAnC,GACJQ,QAAQC,IAAI,YAAaT,GACzBkB,EAAQkB,KAAK,kBACdC,OAAM,SAAAC,GACL9B,QAAQC,IAAI6B,GACZC,MAAMD,MAGdjB,EAAEC,OAAOkB,UAAUC,IAAI,kBAIyCC,YAAU,GACtE,wCAEA,yBAAKhB,UAAU,cACX,2CACA,2BACIiB,KAAK,OACLjB,UAAU,eACVH,GAAG,WACHqB,YAAY,iBACZpB,MAAOR,EAAMF,SACb+B,SAAUzB,EACV0B,UAAQ,KAMhB,yBAAKpB,UAAU,cACX,wCACA,2BACIiB,KAAK,QACLjB,UAAU,eACVH,GAAG,QACHqB,YAAY,cACZpB,MAAOR,EAAMgC,MACbH,SAAUzB,EACV0B,UAAQ,KAIhB,yBAAKpB,UAAU,cACX,2CACA,2BACIiB,KAAK,WACLjB,UAAU,eACVH,GAAG,WACHqB,YAAY,iBACZpB,MAAOR,EAAMD,SACb8B,SAAUzB,EACV0B,UAAQ,KAIhB,yBAAKpB,UAAU,cACX,mDACA,2BACIiB,KAAK,WACLjB,UAAU,eACVH,GAAG,kBACHqB,YAAY,iBACZpB,MAAOR,EAAMiC,gBACbJ,SAAUzB,EACV8B,QAASlC,EAAMD,SACf+B,UAAQ,IAEZ,yBAAKpB,UAAU,oBAAf,yBAGJ,6BACA,4BAAQiB,KAAK,SAASjB,UAAU,6BAAhC,YCnCGyB,MA/Cf,WACI,OACI,kBAAC,IAAD,KAgBI,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAM,eAAnB,kBAEA,kBAACC,EAAA,EAAD,CAAUC,QAAQ,EAAMC,QAAM,GAC1B,kBAACC,EAAA,EAAD,CAAKnC,UAAU,UAAUkC,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASN,KAAM,eAAf,UAEJ,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASN,KAAM,kBAAf,gBAMhB,yBAAK/B,UAAU,gBACX,yBAAKA,UAAU,cACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,QAAQC,UAAWtD,IACrC,kBAAC,IAAD,CAAOqD,KAAK,cAAcC,UAAWtD,IACrC,kBAAC,IAAD,CAAOqD,KAAK,iBAAiBC,UAAWnB,SClD5CoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL1E,QAAQ0E,MAAMA,EAAM9E,c","file":"static/js/main.e04570b5.chunk.js","sourcesContent":["const fetchData = async (url, params={}) => {\n    const call = await fetch(url, params);\n    const response = await call;\n    const data = await call.json();\n    if (!response.ok || !data.success) {\n        throw new Error(\"\\n\" + data.message);\n    }\n    else {\n        let token = response.headers.get(\"x-access-tokens\");\n        if(token !== null) {\n            console.log(token);\n            localStorage.setItem('token', token);\n        }\n        \n    }\n    return data;\n};\n\nexport default fetchData;","import React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport fetchData from \"./fetchData\";\n\nfunction Login() {\n    const [state, setState] = useState({\n        username: \"\",\n        password: \"\"\n    })\n\n    const history = useHistory();\n\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.target.checkValidity()) {\n            fetchData('https://www.noahtigner.com/auth/api-login', {\n                method: 'POST',\n                body: JSON.stringify({\n                    \"username\": state.username,\n                    \"password\": state.password\n                }),\n                headers: {\"Content-Type\": \"application/json\"}\n            }).then(data => {\n                console.log(\"success: \", data);\n                history.push(\"/\");\n            }).catch(err => {\n                console.log(err);\n                alert(err);\n            });\n\n        }\n        e.target.classList.add('was-validated');\n    }\n\n    return(\n        <form className=\"needs-validation\" onSubmit={handleSubmitClick} noValidate>\n            <h3>Login</h3>\n\n            <div className=\"form-group\">\n                <label>Username</label>\n                <input type=\"text\" \n                    className=\"form-control\" \n                    id=\"username\" \n                    placeholder=\"Enter Username\" \n                    value={state.username}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </div>\n\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"password\" \n                    placeholder=\"Enter password\" \n                    value={state.password}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </div>\n            <br/>\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n        </form>\n    )\n}\n\nexport default Login;","import React, {useState} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport fetchData from \"./fetchData\";\n\nfunction Register() {\n    const [state, setState] = useState({\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    })\n\n    const history = useHistory();\n\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.target.checkValidity()) {\n            fetchData('https://www.noahtigner.com/auth/api-register', {\n                method: 'POST',\n                body: JSON.stringify({\n                    \"username\": state.username,\n                    // \"email\": state.email,\n                    \"password\": state.password\n                }),\n                headers: {\"Content-Type\": \"application/json\"}\n            }).then(data => {\n                console.log(\"success: \", data);\n                history.push(\"/auth/login\");\n            }).catch(err => {\n                console.log(err);\n                alert(err);\n            });\n        }\n        e.target.classList.add('was-validated');\n    }\n\n    return(\n        <form className=\"needs-validation\" onSubmit={handleSubmitClick} noValidate>\n            <h3>Register</h3>\n\n            <div className=\"form-group\">\n                <label>Username</label>\n                <input \n                    type=\"text\" \n                    className=\"form-control\" \n                    id=\"username\" \n                    placeholder=\"Enter Username\" \n                    value={state.username}\n                    onChange={handleChange}\n                    required\n                />\n                {/* <div className=\"valid-feedback\">Valid.</div> */}\n                {/* <div className=\"invalid-feedback\">Please fill out this field.</div> */}\n            </div>\n\n            <div className=\"form-group\">\n                <label>Email</label>\n                <input \n                    type=\"email\" \n                    className=\"form-control\" \n                    id=\"email\" \n                    placeholder=\"Enter Email\" \n                    value={state.email}\n                    onChange={handleChange}\n                    required\n                />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"password\"\n                    placeholder=\"Enter Password\" \n                    value={state.password}\n                    onChange={handleChange}\n                    required\n                />\n            </div>\n            \n            <div className=\"form-group\" >\n                <label>Confirm Password</label>\n                <input \n                    type=\"password\" \n                    className=\"form-control\" \n                    id=\"confirmPassword\" \n                    placeholder=\"Enter Password\" \n                    value={state.confirmPassword}\n                    onChange={handleChange}\n                    pattern={state.password}\n                    required\n                />\n                <div className=\"invalid-feedback\">Passwords must match</div>\n            </div>\n\n            <br/>\n            <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n        </form>\n    )\n}\n\nexport default Register;\n\n","import React from 'react';\n// import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container,\n    Row,\n    Col,\n    Jumbotron,\n    Button\n} from 'reactstrap';\n\nimport Login from \"./components/login.jsx\";\nimport Register from \"./components/register.jsx\";\n\n\nfunction App() {\n    return (\n        <Router>\n            {/* <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to={\"/auth/login\"}>noahtigner.com</Link>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n                        <ul className=\"navbar-nav active\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to={\"/auth/login\"}>Login</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to={\"/auth/register\"}>Register</Link>\n                            </li>\n                        </ul>\n                    </div> \n                </div>\n            </nav> */}\n            <Navbar color=\"inverse\" light expand=\"md\">\n                <NavbarBrand href={\"/auth/login\"}>noahtigner.com</NavbarBrand>\n                \n                <Collapse isOpen={true} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                        <NavItem>\n                            <NavLink href={\"/auth/login\"}>Login</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href={\"/auth/register\"}>Register</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n\n            <div className=\"auth-wrapper\">\n                <div className=\"auth-inner\">\n                    <Switch>\n                        <Route exact path='/auth' component={Login} />\n                        <Route path=\"/auth/login\" component={Login} />\n                        <Route path=\"/auth/register\" component={Register} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}